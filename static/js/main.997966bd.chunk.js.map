{"version":3,"sources":["components/Sidebar.module.scss","components/Sidebar.js","components/Champ.js","App.js","serviceWorker.js","index.js","components/Champ.module.scss"],"names":["module","exports","Sidebar","className","styles","parentSidebar","childSidebar","sideBarList","title","Champ","handleMute","setMuted","prevState","useState","muted","initSound","setInitSound","champParent","onClick","champ","autoPlay","loop","src","div","initial","opacity","animate","transition","delay","duration","textContainer","mute","text","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,cAAgB,+BAA+B,aAAe,8BAA8B,OAAS,wBAAwB,MAAQ,uBAAuB,YAAc,+B,wHC+B7KC,EA7BC,WACd,OACE,yBAAKC,UAAWC,IAAOC,eACrB,yBAAKF,UAAWC,IAAOE,cACrB,wBAAIH,UAAWC,IAAOG,aACpB,wBAAIJ,UAAWC,IAAOI,OACpB,wCAEF,4BACE,2CACA,iDAEF,4BACE,2CAAsB,6BACtB,4CAEF,4BACE,2CACA,iDAEF,4BACE,8C,qCCwBGC,EA3CD,WACZ,IAAMC,EAAa,WACjBC,GAAS,SAACC,GACR,OAAQA,MAHM,EAMQC,oBAAS,GANjB,mBAMXC,EANW,KAMJH,EANI,OAOiBE,oBAAS,GAP1B,mBAOXE,EAPW,KAOCC,EAPD,KAiBlB,OACE,yBAAKb,UAAWC,IAAOa,YAAaC,QAThB,WACfH,IAGHL,IACAM,GAAa,MAKb,2BAAOb,UAAWC,IAAOe,MAAOC,UAAQ,EAACC,MAAI,EAACP,MAAOA,GACnD,4BAAQQ,IAAI,oCADd,gDAIA,kBAAC,IAAOC,IAAR,CACAC,QAAS,CAACC,QAAS,GAAIC,QAAS,CAACD,QAAQ,IAAME,WAAY,CAACC,MAAO,IAAKC,SAAU,KAChF1B,UAAWC,IAAO0B,eAElB,qCACA,6FAEE,6BAFF,gBAMF,kBAAC,cAAD,CACEZ,QAASR,EACTP,UAAWC,IAAO2B,KAClBC,KAAMlB,EAAQ,QAAU,WC7BjBmB,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5BrD,EAAOC,QAAU,CAAC,YAAc,2BAA2B,MAAQ,qBAAqB,cAAgB,6BAA6B,KAAO,sB","file":"static/js/main.997966bd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"parentSidebar\":\"Sidebar_parentSidebar__1J-v9\",\"childSidebar\":\"Sidebar_childSidebar__MLg1B\",\"active\":\"Sidebar_active__4H2KY\",\"title\":\"Sidebar_title__3NT3S\",\"sideBarList\":\"Sidebar_sideBarList__3wgoY\"};","import React from \"react\";\r\nimport styles from \"./Sidebar.module.scss\";\r\n\r\nconst Sidebar = () => {\r\n  return (\r\n    <div className={styles.parentSidebar}>\r\n      <div className={styles.childSidebar}>\r\n        <ul className={styles.sideBarList}>\r\n          <li className={styles.title}>\r\n            <span>CHAMP</span>\r\n          </li>\r\n          <li >\r\n            <span>Chapter 1</span>\r\n            <span>William Lartey</span>\r\n          </li>\r\n          <li>\r\n            <span>Chapter 2</span><br/>\r\n            <span>Nii Tagoe</span>\r\n          </li>\r\n          <li>\r\n            <span>Chapter 3</span>\r\n            <span>Joshua Clottey</span>\r\n          </li>\r\n          <li>\r\n            <span>CREDITS</span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React, { useState } from \"react\";\r\nimport styles from \"./Champ.module.scss\";\r\nimport { SliceButton } from \"reg-components\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst Champ = () => {\r\n  const handleMute = () => {\r\n    setMuted((prevState) => {\r\n      return !prevState;\r\n    });\r\n  };\r\n  const [muted, setMuted] = useState(true);\r\n  const [initSound , setInitSound] = useState(false)\r\n\r\n  const handleInitial = () => {\r\n      if(initSound) {\r\n          return\r\n      } \r\n      handleMute()\r\n      setInitSound(true)\r\n  }\r\n\r\n  return (\r\n    <div className={styles.champParent} onClick={handleInitial}>\r\n      <video className={styles.champ} autoPlay loop muted={muted}>\r\n        <source src=\"https://i.imgur.com/1InZsdT.mp4\" />\r\n        Your browser does not support the video tag.\r\n      </video>\r\n      <motion.div\r\n      initial={{opacity: 0}} animate={{opacity:0.8}} transition={{delay: 3.5, duration: 3.5}}\r\n        className={styles.textContainer}\r\n      >\r\n        <h1>CHAMP</h1>\r\n        <h2>\r\n          From the creative vision of Reginald Anim and KinectiK Studios\r\n          <br />\r\n          Coming soon\r\n        </h2>\r\n      </motion.div>\r\n      <SliceButton\r\n        onClick={handleMute}\r\n        className={styles.mute}\r\n        text={muted ? \"sound\" : \"mute\"}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Champ;\r\n","import React from \"react\";\nimport Sidebar from \"./components/Sidebar\";\nimport Champ from \"./components/Champ\";\n\nfunction App() {\n  return (\n    <div>\n      <Sidebar />\n      <Champ />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"champParent\":\"Champ_champParent__3lS6Z\",\"champ\":\"Champ_champ__nPXAc\",\"textContainer\":\"Champ_textContainer__jPvL-\",\"mute\":\"Champ_mute__2ZRLY\"};"],"sourceRoot":""}